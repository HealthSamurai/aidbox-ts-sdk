{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox",
  "type": "registry:component",
  "description": "Autocomplete input and command palette with a list of suggestions.",
  "files": [
    {
      "path": "src/shadcn/components/ui/combobox.tsx",
      "content": "\"use client\";\n\nimport { CheckIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport {\n\tCommand,\n\tCommandEmpty,\n\tCommandInput,\n\tCommandItem,\n\tCommandList,\n} from \"#shadcn/components/ui/command\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectTrigger,\n\tSelectValue,\n} from \"#shadcn/components/ui/select\";\nimport { cn } from \"#shadcn/lib/utils\";\n\nexport interface ComboboxOption {\n\tvalue: string;\n\tlabel: string;\n}\n\ninterface ComboboxProps {\n\toptions: ComboboxOption[];\n\tvalue?: string;\n\tonValueChange?: (value: string) => void;\n\tplaceholder?: string;\n\tsearchPlaceholder?: string;\n\temptyText?: string;\n\tdisabled?: boolean;\n\tclassName?: string;\n}\n\nexport function Combobox({\n\toptions,\n\tvalue,\n\tonValueChange,\n\tplaceholder = \"Select option...\",\n\tsearchPlaceholder = \"Search...\",\n\temptyText = \"No options found.\",\n\tdisabled = false,\n\tclassName,\n}: ComboboxProps) {\n\tconst [open, setOpen] = React.useState(false);\n\tconst [searchValue, setSearchValue] = React.useState(\"\");\n\tconst inputRef = React.useRef<HTMLInputElement>(null);\n\n\tconst filteredOptions = React.useMemo(() => {\n\t\tif (!searchValue) return options;\n\t\treturn options.filter((option) =>\n\t\t\toption.label.toLowerCase().includes(searchValue.toLowerCase()),\n\t\t);\n\t}, [options, searchValue]);\n\n\tconst selectedOption = options.find((option) => option.value === value);\n\n\tconst changeOpen = (newOpen: boolean) => {\n\t\tif (!newOpen) {\n\t\t\tsetSearchValue(\"\");\n\t\t} else {\n\t\t\tinputRef.current?.focus();\n\t\t}\n\t\tsetOpen(newOpen);\n\t};\n\n\treturn (\n\t\t<Select\n\t\t\tvalue={value || \"\"}\n\t\t\t{...(onValueChange && { onValueChange })}\n\t\t\tdisabled={disabled}\n\t\t\topen={open}\n\t\t\tonOpenChange={changeOpen}\n\t\t>\n\t\t\t<SelectTrigger className={className}>\n\t\t\t\t<SelectValue placeholder={placeholder}>\n\t\t\t\t\t{selectedOption?.label}\n\t\t\t\t</SelectValue>\n\t\t\t</SelectTrigger>\n\t\t\t<SelectContent className=\"p-0 [&_[data-radix-select-viewport]]:p-0\">\n\t\t\t\t<Command className=\"w-full\">\n\t\t\t\t\t<CommandInput\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\tplaceholder={searchPlaceholder}\n\t\t\t\t\t\tvalue={searchValue}\n\t\t\t\t\t\tonValueChange={setSearchValue}\n\t\t\t\t\t/>\n\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t<CommandEmpty>{emptyText}</CommandEmpty>\n\n\t\t\t\t\t\t{filteredOptions.map((option) => (\n\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\tdata-state={value === option.value ? \"checked\" : undefined}\n\t\t\t\t\t\t\t\tonSelect={(currentValue) => {\n\t\t\t\t\t\t\t\t\tonValueChange?.(currentValue);\n\t\t\t\t\t\t\t\t\tchangeOpen(false);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t<CheckIcon\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\"ml-auto size-4\",\n\t\t\t\t\t\t\t\t\t\tvalue === option.value ? \"opacity-100\" : \"opacity-0\",\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</CommandList>\n\t\t\t\t</Command>\n\t\t\t</SelectContent>\n\t\t</Select>\n\t);\n}\n\ninterface MultiComboboxProps {\n\toptions: ComboboxOption[];\n\tvalue?: string[];\n\tonValueChange?: (value: string[]) => void;\n\tplaceholder?: string;\n\tsearchPlaceholder?: string;\n\temptyText?: string;\n\tdisabled?: boolean;\n\tclassName?: string;\n\tmaxDisplay?: number;\n}\n\nexport function MultiCombobox({\n\toptions,\n\tvalue = [],\n\tonValueChange,\n\tplaceholder = \"Select options...\",\n\tsearchPlaceholder = \"Search...\",\n\temptyText = \"No options found.\",\n\tdisabled = false,\n\tclassName,\n\tmaxDisplay = 2,\n}: MultiComboboxProps) {\n\tconst [open, setOpen] = React.useState(false);\n\tconst [searchValue, setSearchValue] = React.useState(\"\");\n\tconst inputRef = React.useRef<HTMLInputElement>(null);\n\n\tconst filteredOptions = React.useMemo(() => {\n\t\tif (!searchValue) return options;\n\t\treturn options.filter((option) =>\n\t\t\toption.label.toLowerCase().includes(searchValue.toLowerCase()),\n\t\t);\n\t}, [options, searchValue]);\n\n\tconst selectedOptions = React.useMemo(\n\t\t() => options.filter((option) => value.includes(option.value)),\n\t\t[options, value],\n\t);\n\n\tconst displayText = React.useMemo(() => {\n\t\tif (selectedOptions.length === 0) return placeholder;\n\t\tif (selectedOptions.length <= maxDisplay) {\n\t\t\treturn selectedOptions.map((opt) => opt.label).join(\", \");\n\t\t}\n\t\treturn `${selectedOptions\n\t\t\t.slice(0, maxDisplay)\n\t\t\t.map((opt) => opt.label)\n\t\t\t.join(\", \")} +${selectedOptions.length - maxDisplay}`;\n\t}, [selectedOptions, placeholder, maxDisplay]);\n\n\tconst handleSelect = (selectedValue: string) => {\n\t\tconst newValue = value.includes(selectedValue)\n\t\t\t? value.filter((v) => v !== selectedValue)\n\t\t\t: [...value, selectedValue];\n\t\tonValueChange?.(newValue);\n\t};\n\n\t// Reset search when closing and auto-focus when opening\n\tconst changeOpen = (newOpen: boolean) => {\n\t\tif (!newOpen) {\n\t\t\tsetSearchValue(\"\");\n\t\t} else {\n\t\t\tinputRef.current?.focus();\n\t\t}\n\t\tsetOpen(newOpen);\n\t};\n\n\treturn (\n\t\t<Select open={open} onOpenChange={changeOpen}>\n\t\t\t<SelectTrigger\n\t\t\t\tclassName={`${className} ${displayText ? \"!text-text-primary\" : undefined}`}\n\t\t\t\tdisabled={disabled}\n\t\t\t>\n\t\t\t\t<SelectValue placeholder={displayText || placeholder} />\n\t\t\t</SelectTrigger>\n\t\t\t<SelectContent className=\"p-0 [&_[data-radix-select-viewport]]:p-0\">\n\t\t\t\t<Command className=\"w-full\">\n\t\t\t\t\t<CommandInput\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\tplaceholder={searchPlaceholder}\n\t\t\t\t\t\tvalue={searchValue}\n\t\t\t\t\t\tonValueChange={setSearchValue}\n\t\t\t\t\t/>\n\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t<CommandEmpty>{emptyText}</CommandEmpty>\n\n\t\t\t\t\t\t{filteredOptions.map((option) => (\n\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\tdata-state={\n\t\t\t\t\t\t\t\t\tvalue.includes(option.value) ? \"checked\" : undefined\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tonSelect={handleSelect}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t<CheckIcon\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t\"ml-auto size-4\",\n\t\t\t\t\t\t\t\t\t\tvalue.includes(option.value) ? \"opacity-100\" : \"opacity-0\",\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</CommandList>\n\t\t\t\t</Command>\n\t\t\t</SelectContent>\n\t\t</Select>\n\t);\n}\n\n// Demo component for Storybook\nconst demoOptions = [\n\t{ value: \"next.js\", label: \"Next.js\" },\n\t{ value: \"sveltekit\", label: \"SvelteKit\" },\n\t{ value: \"nuxt.js\", label: \"Nuxt.js\" },\n\t{ value: \"remix\", label: \"Remix\" },\n\t{ value: \"astro\", label: \"Astro\" },\n];\n\nexport function ComboboxDemo() {\n\tconst [value, setValue] = React.useState(\"\");\n\n\treturn (\n\t\t<Combobox\n\t\t\toptions={demoOptions}\n\t\t\tvalue={value}\n\t\t\tonValueChange={setValue}\n\t\t\tplaceholder=\"Select framework...\"\n\t\t\tsearchPlaceholder=\"Search framework...\"\n\t\t/>\n\t);\n}\n\nexport function MultiComboboxDemo() {\n\tconst [value, setValue] = React.useState<string[]>([]);\n\n\treturn (\n\t\t<MultiCombobox\n\t\t\toptions={demoOptions}\n\t\t\tvalue={value}\n\t\t\tonValueChange={setValue}\n\t\t\tplaceholder=\"Select frameworks...\"\n\t\t\tsearchPlaceholder=\"Search framework...\"\n\t\t/>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/shadcn/components/ui/combobox.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { ComboboxDemo } from \"./combobox\";\n\nconst meta = {\n\ttitle: \"Component/Combobox\",\n\tcomponent: ComboboxDemo,\n\targTypes: {},\n} satisfies Meta;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default = {\n\trender: () => (\n\t\t<div className=\"w-[560px]\">\n\t\t\t<ComboboxDemo />\n\t\t</div>\n\t),\n} satisfies Story;\n",
      "type": "registry:ui"
    }
  ]
}