{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "request-line-editor",
  "type": "registry:component",
  "description": "An editor for HTTP request lines with method selector and path input.",
  "files": [
    {
      "path": "src/components/request-line-editor.tsx",
      "content": "import { cva } from \"class-variance-authority\";\nimport type * as React from \"react\";\nimport { toast } from \"sonner\";\nimport { Input } from \"#shadcn/components/ui/input\";\nimport {\n\tSelect,\n\tSelectContent,\n\tSelectItem,\n\tSelectTrigger,\n\tSelectValue,\n} from \"#shadcn/components/ui/select\";\nimport { cn } from \"#shadcn/lib/utils\";\nimport { CopyIcon } from \"./copy-icon\";\n\nconst METHODS = [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"] as const;\ntype RequestMethod = (typeof METHODS)[number];\n\nconst requestMethodVariants = cva<{ method: { [K in RequestMethod]: string } }>(\n\tcn(\n\t\t\"border-r-0\",\n\t\t\"rounded-r-none\",\n\t\t\"shadow-none\",\n\t\t\"typo-label\",\n\t\t\"text-left\",\n\t\t\"items-center\",\n\t\t\"w-26\",\n\t),\n\t{\n\t\tvariants: {\n\t\t\tmethod: {\n\t\t\t\tGET: \"text-utility-green [&_svg]:text-utility-green\",\n\t\t\t\tPOST: \"text-utility-yellow [&_svg]:text-utility-yellow\",\n\t\t\t\tPUT: \"text-utility-blue [&_svg]:text-utility-blue \",\n\t\t\t\tPATCH: \"text-utility-violet [&_svg]:text-utility-violet\",\n\t\t\t\tDELETE: \"text-utility-red [&_svg]:text-utility-red\",\n\t\t\t},\n\t\t},\n\t},\n);\n\ntype RequestMethodSelectorProps = {\n\tvalue: string;\n\tonValueChange?: (newMethod: string) => void;\n};\n\nfunction isKnownMethod(candidate: string): candidate is RequestMethod {\n\tconst methods: readonly string[] = METHODS;\n\treturn methods.includes(candidate);\n}\n\nfunction RequestMethodSelector({\n\tvalue,\n\tonValueChange,\n}: RequestMethodSelectorProps) {\n\treturn (\n\t\t<Select\n\t\t\tvalue={value}\n\t\t\t{...(onValueChange ? { onValueChange: onValueChange } : {})}\n\t\t>\n\t\t\t<SelectTrigger\n\t\t\t\tclassName={requestMethodVariants(\n\t\t\t\t\tisKnownMethod(value) ? { method: value } : undefined,\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t<SelectValue>{value}</SelectValue>\n\t\t\t</SelectTrigger>\n\t\t\t<SelectContent>\n\t\t\t\t{METHODS.map((method) => (\n\t\t\t\t\t<SelectItem key={method} value={method}>\n\t\t\t\t\t\t<span className={requestMethodVariants({ method: method })}>\n\t\t\t\t\t\t\t{method}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</SelectItem>\n\t\t\t\t))}\n\t\t\t</SelectContent>\n\t\t</Select>\n\t);\n}\n\ntype RequestLineEditorProps = {\n\tmethod: string;\n\tplaceholder?: string;\n\tautoFocus?: boolean;\n\tonMethodChange: (newMethod: string) => void;\n\tpath?: string | undefined;\n\tonPathChange?: React.ChangeEventHandler<HTMLInputElement>;\n\tclassName?: string;\n};\n\nfunction RequestLineEditor({\n\tclassName,\n\tmethod,\n\tonMethodChange,\n\tpath,\n\tplaceholder,\n\tautoFocus,\n\tonPathChange,\n}: RequestLineEditorProps) {\n\treturn (\n\t\t<div className={cn(\"flex\", className)}>\n\t\t\t<RequestMethodSelector value={method} onValueChange={onMethodChange} />\n\t\t\t<Input\n\t\t\t\tclassName=\"rounded-l-none\"\n\t\t\t\tvalue={path}\n\t\t\t\tautoFocus={autoFocus}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\trightSlot={\n\t\t\t\t\t<CopyIcon\n\t\t\t\t\t\ttext={`${method} ${path}`}\n\t\t\t\t\t\ttooltipText=\"Copy request line\"\n\t\t\t\t\t\tshowToast={false}\n\t\t\t\t\t\tonCopy={(text) => {\n\t\t\t\t\t\t\t// Custom toast for request line\n\t\t\t\t\t\t\tconst truncatedText =\n\t\t\t\t\t\t\t\ttext.length > 30 ? `${text.slice(0, 30)}...` : text;\n\t\t\t\t\t\t\ttoast(\n\t\t\t\t\t\t\t\t<div className=\"flex flex-col gap-1\">\n\t\t\t\t\t\t\t\t\t<span className=\"typo-body\">Request line copied</span>\n\t\t\t\t\t\t\t\t\t<span className=\"typo-code text-text-secondary\">\n\t\t\t\t\t\t\t\t\t\t{truncatedText}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t</div>,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tduration: 2000,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t\t{...(onPathChange !== undefined ? { onChange: onPathChange } : {})}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport {\n\tRequestLineEditor,\n\ttype RequestLineEditorProps,\n\trequestMethodVariants,\n};\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/request-line-editor.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport * as React from \"react\";\nimport { action } from \"storybook/actions\";\nimport {\n\tRequestLineEditor,\n\ttype RequestLineEditorProps,\n} from \"./request-line-editor\";\n\nconst meta: Meta<typeof RequestLineEditor> = {\n\ttitle: \"Component/Request line editor\",\n\tcomponent: RequestLineEditor,\n\tparameters: {\n\t\tlayout: \"centered\",\n\t},\n\ttags: [\"autodocs\"],\n};\n\nexport default meta;\ntype Story = StoryObj<typeof RequestLineEditor>;\n\nfunction RequestLineEditorWrapper({ method, path }: RequestLineEditorProps) {\n\tconst [currentSelectedMethod, setMethod] = React.useState(method);\n\tconst [currentInputValue, setInputValue] = React.useState(path);\n\tconst actionSetMethod = (method: string) => {\n\t\taction(\"setMethod\")(method);\n\t\tsetMethod(method);\n\t};\n\tconst actionSetInputValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\taction(\"setMethod\")(event);\n\t\tsetInputValue(event.target.value);\n\t};\n\treturn (\n\t\t<RequestLineEditor\n\t\t\tmethod={currentSelectedMethod}\n\t\t\tonMethodChange={actionSetMethod}\n\t\t\tpath={currentInputValue}\n\t\t\tonPathChange={actionSetInputValue}\n\t\t/>\n\t);\n}\n\nexport const GET: Story = {\n\targs: {\n\t\tmethod: \"GET\",\n\t\tpath: \"/fhir/Patient\",\n\t},\n\trender: (args) => <RequestLineEditorWrapper {...args} />,\n};\n\nexport const POST: Story = {\n\targs: {\n\t\tmethod: \"POST\",\n\t\tpath: \"/fhir/Patient\",\n\t},\n\trender: (args) => <RequestLineEditorWrapper {...args} />,\n};\n\nexport const PUT: Story = {\n\targs: {\n\t\tmethod: \"PUT\",\n\t\tpath: \"/fhir/Patient\",\n\t},\n\trender: (args) => <RequestLineEditorWrapper {...args} />,\n};\n\nexport const PATCH: Story = {\n\targs: {\n\t\tmethod: \"PATCH\",\n\t\tpath: \"/fhir/Patient\",\n\t},\n\trender: (args) => <RequestLineEditorWrapper {...args} />,\n};\n\nexport const DELETE: Story = {\n\targs: {\n\t\tmethod: \"DELETE\",\n\t\tpath: \"/fhir/Patient\",\n\t},\n\trender: (args) => <RequestLineEditorWrapper {...args} />,\n};\n",
      "type": "registry:ui"
    }
  ]
}