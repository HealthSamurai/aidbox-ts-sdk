{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tree-view",
  "type": "registry:component",
  "description": "A customizable tree view component with drag and drop, renaming, and custom rendering.",
  "files": [
    {
      "path": "src/components/tree-view.tsx",
      "content": "import type {\n\tFeatureImplementation,\n\tItemInstance,\n\tTreeConfig,\n\tTreeInstance,\n\tUpdater,\n} from \"@headless-tree/core\";\nimport {\n\tcreateOnDropHandler,\n\tdragAndDropFeature,\n\thotkeysCoreFeature,\n\trenamingFeature,\n\tselectionFeature,\n\tsyncDataLoaderFeature,\n} from \"@headless-tree/core\";\nimport { useTree } from \"@headless-tree/react\";\nimport React from \"react\";\nimport { Tree, TreeItem, TreeItemLabel } from \"#shadcn/components/ui/tree\";\nimport { cn } from \"#shadcn/lib/utils.js\";\n\n// Styles\nconst treeItemStyle = cn(\n\t\"relative\",\n\t\"before:absolute\",\n\t\"before:inset-0\",\n\t\"before:-ms-1\",\n\t\"before:-z-20\",\n\t\"before:bg-[repeating-linear-gradient(to_right,transparent_0,transparent_calc(var(--tree-indent)-1px),var(--border)_calc(var(--tree-indent)-1px),var(--border)_calc(var(--tree-indent)))]\",\n);\n\nconst treeItemLabelStyle = cn(\n\t\"before:bg-background\",\n\t\"relative\",\n\t\"before:absolute\",\n\t\"before:inset-x-0\",\n\t\"before:-inset-y-0\",\n\t\"before:-z-10\",\n);\n\ninterface TreeViewItem<T> {\n\tname: string;\n\tchildren?: string[];\n\tmeta?: T;\n}\n\nconst customClickBehavior: FeatureImplementation = {\n\titemInstance: {\n\t\tgetProps: ({ item, prev }) => {\n\t\t\treturn {\n\t\t\t\t...prev?.(),\n\t\t\t\tonClick: () => {\n\t\t\t\t\titem.setFocused();\n\t\t\t\t\titem.primaryAction();\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t},\n};\n\nconst indent = 22;\n\ntype ExpansionPropsUncontrolled = {\n\tdefaultExpandedItems?: string[];\n\texpandedItems?: never;\n\tonExpandedItemsChange?: never;\n};\ntype ExpansionPropsControlled = {\n\tdefaultExpandedItems?: never;\n\texpandedItems: string[];\n\tonExpandedItemsChange: (items: string[]) => void;\n};\ntype ExpansionProps = ExpansionPropsUncontrolled | ExpansionPropsControlled;\n\ntype FocusPropsUncontrolled = {\n\tdefaultFocusedItem?: string;\n\tfocusedItem?: never;\n\tonFocusedItemChange?: never;\n};\ntype FocusPropsControlled = {\n\tdefaultFocusedItem?: never;\n\tfocusedItem: string | null;\n\tonFocusedItemChange: (item: string | null) => void;\n};\ntype FocusProps = FocusPropsUncontrolled | FocusPropsControlled;\n\ntype TreeViewProps<T> = {\n\trootItemId: string;\n\titems: Record<string, TreeViewItem<T>>;\n\tcustomItemView?: (\n\t\titem: ItemInstance<TreeViewItem<T>>,\n\t\ttree: TreeInstance<TreeViewItem<T>>,\n\t) => React.ReactNode;\n\tonRename?:\n\t\t| ((item: ItemInstance<TreeViewItem<T>>, value: string) => void)\n\t\t| undefined;\n\tdisableHover?: boolean;\n\tzebra?: boolean;\n\thorizontalLines?: boolean;\n\thideChevron?: boolean;\n\titemLabelClassFn?: (item: ItemInstance<TreeViewItem<T>>) => string;\n\tcanReorder?: boolean;\n\tonDropFn?: (\n\t\ttree: TreeInstance<TreeViewItem<T>>,\n\t\titem: ItemInstance<TreeViewItem<T>>,\n\t\tnewChildren: string[],\n\t) => void;\n} & ExpansionProps &\n\tFocusProps;\n\nfunction TreeView<T>({\n\trootItemId,\n\titems,\n\tdefaultFocusedItem,\n\tfocusedItem,\n\tonFocusedItemChange,\n\tdefaultExpandedItems,\n\texpandedItems,\n\tonExpandedItemsChange,\n\tcustomItemView,\n\tonRename,\n\tdisableHover,\n\tzebra,\n\thorizontalLines,\n\thideChevron,\n\titemLabelClassFn,\n\tcanReorder,\n\tonDropFn,\n}: TreeViewProps<T>) {\n\t\"use no memo\";\n\n\tconst initialExpandedItems = defaultExpandedItems ?? expandedItems;\n\tconst initialFocusedItem = defaultFocusedItem ?? focusedItem;\n\n\tconst setExpandedItems =\n\t\texpandedItems !== undefined && onExpandedItemsChange !== undefined\n\t\t\t? (updater: Updater<string[]>) => {\n\t\t\t\t\tconst newVal =\n\t\t\t\t\t\tupdater instanceof Function ? updater(expandedItems) : updater;\n\n\t\t\t\t\tonExpandedItemsChange(newVal);\n\t\t\t\t}\n\t\t\t: undefined;\n\n\tconst setFocusedItem =\n\t\tfocusedItem !== undefined && onFocusedItemChange !== undefined\n\t\t\t? (updater: Updater<string | null>) => {\n\t\t\t\t\tconst newVal =\n\t\t\t\t\t\tupdater instanceof Function ? updater(focusedItem) : updater;\n\n\t\t\t\t\tonFocusedItemChange(newVal);\n\t\t\t\t}\n\t\t\t: undefined;\n\n\tconst treeConfig: TreeConfig<TreeViewItem<T>> = {\n\t\tinitialState: {\n\t\t\t...(initialExpandedItems !== undefined\n\t\t\t\t? { expandedItems: initialExpandedItems }\n\t\t\t\t: {}),\n\t\t\t...(initialFocusedItem !== undefined\n\t\t\t\t? { focusedItem: initialFocusedItem }\n\t\t\t\t: {}),\n\t\t},\n\t\tstate: {\n\t\t\t...(expandedItems !== undefined ? { expandedItems } : {}),\n\t\t\t...(focusedItem !== undefined ? { focusedItem } : {}),\n\t\t},\n\t\t...(setExpandedItems !== undefined ? { setExpandedItems } : {}),\n\t\t...(setFocusedItem !== undefined ? { setFocusedItem } : {}),\n\t\tindent,\n\t\trootItemId: rootItemId,\n\t\tisItemFolder: (item: ItemInstance<TreeViewItem<T>>) =>\n\t\t\titem.getItemData()?.children !== undefined,\n\t\tgetItemName: (item: ItemInstance<TreeViewItem<T>>) =>\n\t\t\titem.getItemData()?.name,\n\t\tdataLoader: {\n\t\t\tgetItem: (itemId) => (items[itemId] as TreeViewItem<T>) ?? {},\n\t\t\tgetChildren: (itemId) => items[itemId]?.children ?? [],\n\t\t},\n\t\t...(onRename ? { onRename: onRename } : {}),\n\t\tfeatures: [\n\t\t\tsyncDataLoaderFeature,\n\t\t\thotkeysCoreFeature,\n\t\t\tselectionFeature,\n\t\t\trenamingFeature,\n\t\t\tdragAndDropFeature,\n\t\t\tcustomClickBehavior,\n\t\t],\n\t\tcanReorder: canReorder ?? false,\n\t\tonDrop: createOnDropHandler((item, newChildren) => {\n\t\t\tonDropFn?.(tree, item, newChildren);\n\t\t}),\n\t};\n\n\tconst tree = useTree<TreeViewItem<T>>(treeConfig);\n\n\tconst [prevItems, setPrevItems] = React.useState<null | typeof items>(null);\n\tif (prevItems !== items) {\n\t\ttree.rebuildTree();\n\t\tsetPrevItems(items);\n\t}\n\n\treturn (\n\t\t<Tree tree={tree} indent={indent}>\n\t\t\t{tree.getItems().map((item) => {\n\t\t\t\treturn (\n\t\t\t\t\t<TreeItem\n\t\t\t\t\t\tkey={item.getId()}\n\t\t\t\t\t\titem={item}\n\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\ttreeItemStyle,\n\t\t\t\t\t\t\tzebra\n\t\t\t\t\t\t\t\t? \"even:bg-bg-secondary even:[&_[data-slot=tree-item-label]]:bg-bg-secondary\"\n\t\t\t\t\t\t\t\t: \"\",\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TreeItemLabel\n\t\t\t\t\t\t\thideChevron={hideChevron ?? false}\n\t\t\t\t\t\t\tdisableHover={disableHover ?? false}\n\t\t\t\t\t\t\tclassName={cn(treeItemLabelStyle, itemLabelClassFn?.(item))}\n\t\t\t\t\t\t\t// onClick={() => onSelectItem?.(item)}\n\t\t\t\t\t\t\thorizontalLines={horizontalLines ?? false}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{customItemView\n\t\t\t\t\t\t\t\t? customItemView(item, tree)\n\t\t\t\t\t\t\t\t: item.getItemData()?.name}\n\t\t\t\t\t\t</TreeItemLabel>\n\t\t\t\t\t</TreeItem>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t<div\n\t\t\t\tstyle={tree.getDragLineStyle()}\n\t\t\t\tclassName=\"h-px bg-bg-link z-100 mx-4\"\n\t\t\t/>\n\t\t</Tree>\n\t);\n}\n\nexport { TreeView, type TreeViewItem, type TreeInstance };\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/tree-view.stories.tsx",
      "content": "import type { ItemInstance } from \"@headless-tree/core\";\nimport type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport { Ellipsis, Pin, Plus } from \"lucide-react\";\nimport React from \"react\";\nimport { action } from \"storybook/actions\";\nimport { Button } from \"#shadcn/components/ui/button.js\";\nimport { PinIcon } from \"../icons\";\nimport type { TreeViewItem } from \"./tree-view\";\nimport { TreeView } from \"./tree-view\";\n\nconst meta: Meta<typeof TreeView> = {\n\ttitle: \"Component/Tree view\",\n\tcomponent: TreeView,\n\tparameters: {\n\t\tlayout: \"fullscreen\",\n\t},\n\ttags: [\"autodocs\"],\n};\ntype ItemMeta = {\n\tpinned?: boolean;\n\tmethod?: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\";\n\tpath?: string;\n};\n\nexport default meta;\ntype Story = StoryObj<typeof TreeView<ItemMeta>>;\n\nconst items: Record<string, TreeViewItem<ItemMeta>> = {\n\troot: {\n\t\tname: \"Root\",\n\t\tchildren: [\"collection1\", \"collection2\", \"collection3\"],\n\t},\n\tcollection1: {\n\t\tname: \"Collection 1\",\n\t\tchildren: [\"request1\", \"request2\", \"request3\"],\n\t\tmeta: {\n\t\t\tpinned: true,\n\t\t},\n\t},\n\tcollection2: {\n\t\tname: \"Collection 2\",\n\t\tchildren: [\"request4\", \"request5\", \"request6\"],\n\t},\n\tcollection3: {\n\t\tname: \"New Collection\",\n\t\tchildren: [\n\t\t\t\"request7\",\n\t\t\t\"request8\",\n\t\t\t\"request9\",\n\t\t\t\"request10\",\n\t\t\t\"request11\",\n\t\t\t\"collection4\",\n\t\t],\n\t},\n\tcollection4: {\n\t\tname: \"New Collection\",\n\t\tchildren: [\"request12\", \"request13\", \"request14\"],\n\t},\n\trequest1: {\n\t\tmeta: {\n\t\t\tmethod: \"GET\",\n\t\t\tpath: \"/request1\",\n\t\t},\n\t\tname: \"Request 1\",\n\t},\n\trequest2: {\n\t\tmeta: {\n\t\t\tmethod: \"POST\",\n\t\t\tpath: \"/request2\",\n\t\t},\n\t\tname: \"Request 2\",\n\t},\n\trequest3: {\n\t\tmeta: {\n\t\t\tmethod: \"PUT\",\n\t\t\tpath: \"/request3\",\n\t\t},\n\t\tname: \"Request 3\",\n\t},\n\trequest4: {\n\t\tmeta: {\n\t\t\tmethod: \"DELETE\",\n\t\t\tpath: \"/request4\",\n\t\t},\n\t\tname: \"Request 4\",\n\t},\n\trequest5: {\n\t\tmeta: {\n\t\t\tmethod: \"PATCH\",\n\t\t\tpath: \"/request5\",\n\t\t},\n\t\tname: \"Request 5\",\n\t},\n\trequest6: {\n\t\tmeta: {\n\t\t\tmethod: \"GET\",\n\t\t\tpath: \"/request6\",\n\t\t},\n\t\tname: \"Request 6\",\n\t},\n\trequest7: {\n\t\tmeta: {\n\t\t\tmethod: \"PATCH\",\n\t\t\tpath: \"/fhir/Patient/123\",\n\t\t},\n\t\tname: \"Request 7\",\n\t},\n\trequest8: {\n\t\tmeta: {\n\t\t\tmethod: \"DELETE\",\n\t\t\tpath: \"/fhir/Patient/123\",\n\t\t},\n\t\tname: \"Request 8\",\n\t},\n\trequest9: {\n\t\tmeta: {\n\t\t\tmethod: \"PUT\",\n\t\t\tpath: \"/fhir/Patient/123\",\n\t\t},\n\t\tname: \"Request 9\",\n\t},\n\trequest10: {\n\t\tmeta: {\n\t\t\tmethod: \"POST\",\n\t\t\tpath: \"/fhir/Patient/123\",\n\t\t},\n\t\tname: \"Request 10\",\n\t},\n\trequest11: {\n\t\tmeta: {\n\t\t\tmethod: \"GET\",\n\t\t\tpath: \"/fhir/Patient/123\",\n\t\t},\n\t\tname: \"Request 11\",\n\t},\n\trequest12: {\n\t\tmeta: {\n\t\t\tmethod: \"PUT\",\n\t\t\tpath: \"/fhir/Patient/123\",\n\t\t},\n\t\tname: \"Request 12\",\n\t},\n\trequest13: {\n\t\tmeta: {\n\t\t\tmethod: \"PUT\",\n\t\t\tpath: \"/fhir/Patient/123\",\n\t\t},\n\t\tname: \"Request 13\",\n\t},\n\trequest14: {\n\t\tmeta: {\n\t\t\tmethod: \"PUT\",\n\t\t\tpath: \"/fhir/Patient/123\",\n\t\t},\n\t\tname: \"Request 14\",\n\t},\n};\n\nexport const Default: Story = {\n\targs: {\n\t\titems: items,\n\t\trootItemId: \"root\",\n\t\tfocusedItem: \"request9\",\n\t\tdefaultExpandedItems: [\"collection3\"],\n\t\tonFocusedItemChange: (a) => action(\"onSelectItem\")(a),\n\t},\n\trender: (args) => <TreeView {...args} />,\n};\n\nfunction customItemView(item: ItemInstance<TreeViewItem<ItemMeta>>) {\n\tconst isRootLevel = item.getItemMeta().level === 0;\n\tconst hasChildren = item.getItemData()?.children !== undefined;\n\tconst requestMethhod = item.getItemData()?.meta?.method;\n\tconst requestPath = item.getItemData()?.meta?.path;\n\tconst itemName = item.getItemData()?.name;\n\n\tconst requestMethodView = () => {\n\t\tswitch (requestMethhod) {\n\t\t\tcase \"GET\":\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"opacity-50 group-hover/tree-item-label:opacity-100 in-data-[selected=true]:opacity-100 font-medium min-w-13 w-13 text-utility-green text-left\">\n\t\t\t\t\t\tGET\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\tcase \"POST\":\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"opacity-50 group-hover/tree-item-label:opacity-100 in-data-[selected=true]:opacity-100 font-medium min-w-13 w-13 text-utility-yellow text-left\">\n\t\t\t\t\t\tPOST\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\tcase \"PUT\":\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"opacity-50 group-hover/tree-item-label:opacity-100 in-data-[selected=true]:opacity-100 font-medium min-w-13 w-13 text-utility-blue text-left\">\n\t\t\t\t\t\tPUT\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\tcase \"PATCH\":\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"opacity-50 group-hover/tree-item-label:opacity-100 in-data-[selected=true]:opacity-100 font-medium min-w-13 w-13 text-utility-violet text-left\">\n\t\t\t\t\t\tPATCH\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\tcase \"DELETE\":\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"opacity-50 group-hover/tree-item-label:opacity-100 in-data-[selected=true]:opacity-100 font-medium min-w-13 w-13 text-utility-red text-left\">\n\t\t\t\t\t\tDELETE\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\treturn (\n\t\t\t\t\t<div className=\"opacity-50 group-hover/tree-item-label:opacity-100 in-data-[selected=true]:opacity-100 font-medium min-w-13 w-13 text-utility-gray text-left\">\n\t\t\t\t\t\tUnknown\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"w-full flex justify-between gap-2\">\n\t\t\t<div className=\"flex items-center gap-2 truncate\">\n\t\t\t\t{hasChildren ? (\n\t\t\t\t\titemName\n\t\t\t\t) : (\n\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t{requestMethodView()}\n\t\t\t\t\t\t{requestPath}\n\t\t\t\t\t</React.Fragment>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className=\"gap-2 hidden group-hover/tree-item-label:flex items-center\">\n\t\t\t\t{isRootLevel && (\n\t\t\t\t\t<Button variant=\"link\" size=\"small\" className=\"p-0 h-4\" asChild>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t{item.getItemData()?.meta?.pinned ? <PinIcon /> : <Pin />}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t\t{hasChildren && (\n\t\t\t\t\t<Button variant=\"link\" size=\"small\" className=\"p-0 h-4\" asChild>\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t<Plus />\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t\t<Button variant=\"link\" size=\"small\" className=\"p-0 h-4\" asChild>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<Ellipsis />\n\t\t\t\t\t</span>\n\t\t\t\t</Button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport const CustomItemView: Story = {\n\targs: {\n\t\titems: items,\n\t\trootItemId: \"root\",\n\t\tfocusedItem: \"request11\",\n\t\tdefaultExpandedItems: [\"collection3\", \"collection4\"],\n\t\tonFocusedItemChange: (a) => action(\"onSelectItem\")(a ? items[a]?.name : a),\n\t\tcustomItemView: customItemView,\n\t},\n\trender: (args) => <TreeView {...args} />,\n};\n",
      "type": "registry:ui"
    }
  ]
}