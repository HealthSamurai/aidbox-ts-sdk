{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-dropdown",
  "type": "registry:component",
  "description": "A button with dropdown menu for selecting from multiple options.",
  "files": [
    {
      "path": "src/components/button-dropdown.tsx",
      "content": "import { cva } from \"class-variance-authority\";\nimport * as Lucide from \"lucide-react\";\nimport * as React from \"react\";\nimport { Button } from \"#shadcn/components/ui/button.js\";\nimport {\n\tCommand,\n\tCommandInput,\n\tCommandItem,\n\tCommandList,\n} from \"#shadcn/components/ui/command.js\";\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from \"#shadcn/components/ui/popover\";\nimport { cn } from \"#shadcn/lib/utils\";\n\nexport interface ButtonDropdownOption {\n\tvalue: string;\n\tlabel: string;\n}\n\nconst popoverTriggerButtonStyle = cn(\n\t\"text-text-secondary\",\n\t\"bg-gray-100\",\n\t\"rounded-full\",\n\t\"px-2 h-6\",\n);\n\nconst checkIconStyles = cva(\"ml-auto size-4\", {\n\tvariants: {\n\t\tisSelected: {\n\t\t\ttrue: \"opacity-100\",\n\t\t\tfalse: \"opacity-0\",\n\t\t},\n\t},\n});\n\nexport function ButtonDropdown({\n\toptions,\n\tselectedValue,\n\tonSelectItem,\n}: {\n\tselectedValue?: string;\n\toptions: ButtonDropdownOption[];\n\tonSelectItem: (item: string) => void;\n}) {\n\tconst [open, setOpen] = React.useState(false);\n\n\tconst onSelectItemMy = (item: string) => {\n\t\tonSelectItem(item);\n\t\tsetOpen(false);\n\t};\n\n\tconst selectedOption = options.find(\n\t\t(option) => option.value === selectedValue,\n\t)?.value;\n\n\treturn (\n\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t<PopoverTrigger asChild>\n\t\t\t\t<Button variant=\"link\" className={popoverTriggerButtonStyle}>\n\t\t\t\t\t<span className=\"typo-body\">{selectedOption}</span>\n\t\t\t\t\t<Lucide.ChevronDownIcon />\n\t\t\t\t</Button>\n\t\t\t</PopoverTrigger>\n\t\t\t<PopoverContent className=\"p-0\">\n\t\t\t\t<Command>\n\t\t\t\t\t<CommandInput></CommandInput>\n\t\t\t\t\t<CommandList>\n\t\t\t\t\t\t{options.map((option) => (\n\t\t\t\t\t\t\t<CommandItem\n\t\t\t\t\t\t\t\tkey={option.value}\n\t\t\t\t\t\t\t\tdata-state={\n\t\t\t\t\t\t\t\t\tselectedOption === option.value ? \"checked\" : \"unchecked\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalue={option.value}\n\t\t\t\t\t\t\t\tonSelect={onSelectItemMy}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{option.label}\n\t\t\t\t\t\t\t\t<Lucide.CheckIcon\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\tcheckIconStyles({\n\t\t\t\t\t\t\t\t\t\t\tisSelected: selectedOption === option.value,\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</CommandItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</CommandList>\n\t\t\t\t</Command>\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/components/button-dropdown.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react-vite\";\nimport React from \"react\";\nimport { ButtonDropdown } from \"./button-dropdown\";\n\nconst meta = {\n\ttitle: \"Component/ButtonDropdown\",\n\tcomponent: ButtonDropdownDemo,\n\targTypes: {},\n} satisfies Meta;\nexport default meta;\n\n// Demo component for Storybook\nconst demoOptions = [\n\t{ value: \"next.js\", label: \"Next.js\" },\n\t{ value: \"sveltekit\", label: \"SvelteKit\" },\n\t{ value: \"nuxt.js\", label: \"Nuxt.js\" },\n\t{ value: \"remix\", label: \"Remix\" },\n\t{ value: \"astro\", label: \"Astro\" },\n];\n\nfunction ButtonDropdownDemo() {\n\tconst [value, setValue] = React.useState(\"next.js\");\n\n\treturn (\n\t\t<ButtonDropdown\n\t\t\toptions={demoOptions}\n\t\t\tselectedValue={value}\n\t\t\tonSelectItem={setValue}\n\t\t/>\n\t);\n}\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Default = {\n\trender: () => (\n\t\t<div className=\"w-[560px]\">\n\t\t\t<ButtonDropdownDemo />\n\t\t</div>\n\t),\n} satisfies Story;\n",
      "type": "registry:ui"
    }
  ]
}